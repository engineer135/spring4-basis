package com.tmsi.common;

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.io.FilenameUtils;
import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFDateUtil;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.xssf.usermodel.XSSFCell;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

public class CommonExcelConverter {
	static SimpleDateFormat dt = new SimpleDateFormat("YYYY-MM-dd"); 
	
	public static List<Map<String, Object>> convertExcelToList(String filePath, String[] columnArr) throws Exception {
		// 반환할 객체를 생성
        List<Map<String,Object>> list = new ArrayList<Map<String,Object>>();
        
		String ext = FilenameUtils.getExtension(filePath).toLowerCase();
		if(ext.equals("xls")) {
			list = convertXls(list, filePath, columnArr);
		}else if(ext.equals("xlsx")) {
			list = convertXlsx(list, filePath, columnArr);
		}
		return list;
	}
	
	private static void excelToList(List<Map<String,Object>> list, String[] columnArr, Workbook workbook, Sheet curSheet, Row curRow, Cell curCell ) throws Exception {
		// Sheet 탐색 for문
        for(int sheetIndex = 0 ; sheetIndex < 1; sheetIndex++) {
            // 현재 Sheet 반환
            curSheet = workbook.getSheetAt(sheetIndex);
            // row 탐색 for문
            for(int rowIndex=0; rowIndex < curSheet.getPhysicalNumberOfRows(); rowIndex++) {
                // row 0은 헤더정보이기 때문에 무시
                if(rowIndex != 0) {
                	Map<String,Object> rowMap = new HashMap<String,Object>(); // row 정보를 담을 맵 생성
                	
                    // 현재 row 반환
                    curRow = curSheet.getRow(rowIndex);
                    String value;
                    
                    // row의 첫번째 cell값이 비어있지 않은 경우 만 cell탐색
                    if(!"".equals(curRow.getCell(0).getStringCellValue())) {
                        
                        // cell 탐색 for 문
                        for(int cellIndex=0;cellIndex<curRow.getPhysicalNumberOfCells(); cellIndex++) {
                            curCell = curRow.getCell(cellIndex);
                            
                            if(true) {
                                value = "";
                                // cell 스타일이 다르더라도 String으로 반환 받음
                                switch (curCell.getCellType()){
                                case FORMULA:
                                    value = curCell.getCellFormula();
                                    break;
                                case NUMERIC:
                                	if(HSSFDateUtil.isCellDateFormatted(curCell)) {
                                		value = dt.format(curCell.getDateCellValue()) +"";
                                	}else {
                                		value = curCell.getNumericCellValue()+"";
                                	}
                                    break;
                                case STRING:
                                    value = curCell.getStringCellValue()+"";
                                    break;
                                case BLANK:
                                    //value = curCell.getBooleanCellValue()+"";
                                	value = "";
                                    break;
                                case ERROR:
                                    value = curCell.getErrorCellValue()+"";
                                    break;
                                default:
                                    value = new String();
                                    break;
                                }
                                
                                //System.out.println("value======"+value);
                                rowMap.put(columnArr[cellIndex], value);
                                
                            }
                        }
                        // cell 탐색 이후 rowMap 추가
                        list.add(rowMap);
                    }
                }
            }
        }
	}
	
	private static List<Map<String,Object>> convertXls(List<Map<String,Object>> list, String filePath, String[] columnArr) throws Exception {
        FileInputStream fis = null;
        HSSFWorkbook workbook = null;
        
        try {
            
            fis= new FileInputStream(filePath);
            // HSSFWorkbook은 엑셀파일 전체 내용을 담고 있는 객체
            workbook = new HSSFWorkbook(fis);
            
            // 탐색에 사용할 Sheet, Row, Cell 객체
            HSSFSheet curSheet = null;
            HSSFRow   curRow = null;
            HSSFCell  curCell = null;
            
            excelToList(list, columnArr, workbook, curSheet, curRow, curCell);
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
            
        } finally {
            try {
                // 사용한 자원은 finally에서 해제
                if( workbook!= null) workbook.close();
                if( fis!= null) fis.close();
                
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
        return list;
	}
	
	private static List<Map<String,Object>> convertXlsx(List<Map<String,Object>> list, String filePath, String[] columnArr) throws Exception {
        FileInputStream fis = null;
        XSSFWorkbook workbook = null;
        
        try {
            
            fis= new FileInputStream(filePath);
            // HSSFWorkbook은 엑셀파일 전체 내용을 담고 있는 객체
            workbook = new XSSFWorkbook(fis);
            
            // 탐색에 사용할 Sheet, Row, Cell 객체
            XSSFSheet curSheet = null;
            XSSFRow   curRow = null;
            XSSFCell  curCell = null;
            
            excelToList(list, columnArr, workbook, curSheet, curRow, curCell);
            
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
            
        } finally {
            try {
                // 사용한 자원은 finally에서 해제
                if( workbook!= null) workbook.close();
                if( fis!= null) fis.close();
                
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
        return list;
    }
}
